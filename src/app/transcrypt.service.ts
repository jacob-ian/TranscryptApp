import { Injectable } from '@angular/core';
import { AngularFireFunctions } from '@angular/fire/functions';
import { functions } from 'firebase';

/**
 * Create a caption interface object
 */
interface Caption {
  baseUrl: string; // the URL to the caption
  query: string;
  lang: string; // the language code for the track
  kind: 'asr' | 'standard'; // whether or not the track is autogenerated
  name: string; // the English readable name of the caption track
}

/**
 * An interface for the possible translation languages.
 */
interface TLangs {
  lang: string; // the language code
  name: string; // the Simple English language name
}

/**
 * Create a response object for the CaptionsList
 */
export interface CaptionsList {
  videoTitle: string;
  captions: Caption[];
  translation_langs: TLangs[];
}

@Injectable({
  providedIn: 'root',
})
export class TranscryptService {
  constructor(private functions: AngularFireFunctions) {}

  /**
   * Fetches the list of captions and translation languages for a YouTube video.
   * @param videoId the YouTube video ID
   * @returns a CaptionsList object in a promise
   * @throws an error message
   */
  async getCaptionsList(videoId: string): Promise<CaptionsList> {
    // Define the Firebase cloud function for getting the list of captions
    var getCaptionsListFunc = this.functions.httpsCallable('getCaptionsList');

    try {
      // Call the Firebase function
      return await getCaptionsListFunc({ videoId }).toPromise();
    } catch (err) {
      // Get the error message
      const error: functions.HttpsError = err;

      // Rethrow the message
      throw { message: error.message };
    }
  }

  /**
   * Fetches the transcript from the requested captions track/
   * @param encodedBaseUrl the baseURL of the caption track provided by the CaptionsList
   * @param tlang the language code of the translation if required
   * @returns an object with the transcript.
   */
  async getCaptionTrack(encodedBaseUrl: string, tlang: string): Promise<any> {
    // Define the firebase function
    var getCaptionTrackFunc = this.functions.httpsCallable('getCaptionTrack');

    try {
      // Call the firebase function
      return await getCaptionTrackFunc({
        data: encodedBaseUrl,
        tlang,
      }).toPromise();
    } catch (err) {
      // Get the error
      const error: functions.HttpsError = err;

      // Rethrow the error message
      throw error.message;
    }
  }
}
